#include "sethv.h"

int32_t handle;
uint32_t hv_data;
std::vector<int> enable_channel;

int monitor()
{
  CVBoardTypes vme_board = cvV1718;
  CVErrorCodes ret;

  ret = CAENVME_Init(vme_board, 0, 0, &handle);
  if (ret != cvSuccess)
    {
      printf("\n\n Error opening V1718! \n\n");
      CAENVME_End(handle);
      return 1;
    }

  bool ready = true;
  for (int ch = 0; ch < 6; ch++)
    {
      printf("V6521N -- CH%i",ch);
      printf(" -- %f V",get_voltage_v6521n(ch));
      printf(" -- %f uA",get_current_v6521n(ch));
      std::string stat = status(ch,-1);
      printf(" -- %s\n",stat);
      std::string::size_type on = stat.find("ON");
      if (on!=std::string::npos || on==std::string::npos)
	{
	  std::cout << "pre-replace stat.length()=" << stat.length() << std::endl;
	  stat.replace(on,on+3,"");
	  std::cout << "postreplace stat.length()=" << stat.length() << std::endl;
	  if (stat.length() != 0) ready = false;
	}
    }  
  for (int ch = 0; ch < 6; ch++)
    {
      printf("V6521P -- CH%i",ch);
      printf(" -- %f V",get_voltage_v6521p(ch));
      printf(" -- %f uA",get_current_v6521p(ch));
      printf(" -- %s\n",status(ch,1));
    }

  return 1;
}

int getconfig()
{
  return 1;
}

std::string status(int ch, int board)
{
  CVBoardTypes vme_board = cvV1718;
  CVErrorCodes ret;

  ret = CAENVME_Init(vme_board, 0, 0, &handle);
  if (ret != cvSuccess)
    {
      printf("\n\n Error opening V1718! \n\n");
      CAENVME_End(handle);
      return 1;
    }

  std::string full_status;

  if (board == -1)
    {
      struct STATUS_REGISTER *stat = (struct STATUS_REGISTER *) get_channel_status_v6521n(ch);
      if (stat->ON) full_status+="ON ";
      if (stat->RAMPUP) full_status+="RAMPUP ";
      if (stat->RAMPDOWN) full_status+="RAMPDOWN ";
      if (stat->OVERCURRENT) full_status+="OVERCURRENT ";
      if (stat->OVERVOLTAGE) full_status+="OVERVOLTAGE ";
      if (stat->UNDERVOLTAGE) full_status+="UNDERVOLTAGE ";
      if (stat->MAXV) full_status+="MAXV ";
      if (stat->MAXI) full_status+="MAXI ";
      if (stat->TRIP) full_status+="TRIP ";
      if (stat->OVERPOWER) full_status+="OVERPOWER ";
      if (stat->OVERTEMPERATURE) full_status+="OVERTEMPERATURE ";
      if (stat->DISABLED) full_status+="DISABLED ";
      if (stat->INTERLOCK) full_status+="INTERLOCK ";
      if (stat->UNCALIBRATED) full_status+="UNCALIBRATED ";
      full_status+="\n";
    }
  else if (board == 1)
    {
      struct STATUS_REGISTER *stat = (struct STATUS_REGISTER *) get_channel_status_v6521p(ch);
      if (stat->ON) full_status+="ON ";
      if (stat->RAMPUP) full_status+="RAMPUP ";
      if (stat->RAMPDOWN) full_status+="RAMPDOWN ";
      if (stat->OVERCURRENT) full_status+="OVERCURRENT ";
      if (stat->OVERVOLTAGE) full_status+="OVERVOLTAGE ";
      if (stat->UNDERVOLTAGE) full_status+="UNDERVOLTAGE ";
      if (stat->MAXV) full_status+="MAXV ";
      if (stat->MAXI) full_status+="MAXI ";
      if (stat->TRIP) full_status+="TRIP ";
      if (stat->OVERPOWER) full_status+="OVERPOWER ";
      if (stat->OVERTEMPERATURE) full_status+="OVERTEMPERATURE ";
      if (stat->DISABLED) full_status+="DISABLED ";
      if (stat->INTERLOCK) full_status+="INTERLOCK ";
      if (stat->UNCALIBRATED) full_status+="UNCALIBRATED ";
      full_status+="\n";
    }
  
  CAENVME_End(handle);

  return full_status;
}

int setconfig()
{
  CVBoardTypes vme_board = cvV1718;
  CVErrorCodes ret;

  ret = CAENVME_Init(vme_board, 0, 0, &handle);
  if (ret != cvSuccess)
    {
      printf("\n\n Error opening V1718! \n\n");
      CAENVME_End(handle);
      return 1;
    }

  std::string BOARD,CHNUM,VSET,ISET,
    PW,TRIP_TIME,SVMAX,RAMP_DOWN,
    RAMP_UP,PWDOWN,IMON_RANGE;

  std::string line;
  std::ifstream configfile ("config.conf");

  bool success = true;

  if (configfile.is_open())
    {
      while (getline(configfile,line))
	{
	  std::stringstream ss(line);
	  ss >> BOARD;
	  if (BOARD == "N")
	    {
	      ss >> CHNUM >> VSET >> ISET >> PW >> TRIP_TIME 
		 >> SVMAX >> RAMP_DOWN >> RAMP_UP >> PWDOWN >> IMON_RANGE;
	      
	      ret = set_voltage_v6521n((uint32_t)stoi(CHNUM),(uint32_t)stoi(VSET));
	      if (ret != cvSuccess)
		{
		  printf("\nBad voltage or bad channel\n");
		  success = false;
		}

	      ret = set_current_v6521n((uint32_t)stoi(CHNUM),stof(ISET));
	      if (ret != cvSuccess)
		{
		  printf("\nBad current or bad channel\n");
		  success = false;
		}

	      if (stoi(PW)) enable_channel.push_back((uint32_t)stoi(CHNUM)+10);

	      ret = set_trip_time_v6521n((uint32_t)stoi(CHNUM),(uint32_t)stoi(TRIP_TIME));
	      if (ret != cvSuccess)
		{
		  printf("\nBad trip time or bad channel\n");
		  success = false;
		}

	      ret = set_svmax_v6521n((uint32_t)stoi(CHNUM),(uint32_t)stoi(SVMAX));
	      if (ret != cvSuccess)
		{
		  printf("\nBad svmax or bad channel\n");
		  success = false;
		}

	      ret = set_ramp_down_v6521n((uint32_t)stoi(CHNUM),(uint32_t)stoi(RAMP_DOWN));
	      if (ret != cvSuccess)
		{
		  printf("\nBad ramp down or bad channel\n");
		  success = false;
		}

	      ret = set_ramp_up_v6521n((uint32_t)stoi(CHNUM),(uint32_t)stoi(RAMP_UP));
	      if (ret != cvSuccess)
		{
		  printf("\nBad ramp up or bad channel\n");
		  success = false;
		}

	      if (stoi(PWDOWN))
		{
		  ret = ramp_down_channel_v6521n((uint32_t)stoi(CHNUM));
		}
	      else 
		{
		  ret = kill_channel_v6521n((uint32_t)stoi(CHNUM));
		}
	      if (ret != cvSuccess)
		{
		  printf("\nBad power down or bad channel\n");
		  success = false;
		}

	      if (stoi(IMON_RANGE))
		{
		  ret = set_imon_low_v6521n((uint32_t)stoi(CHNUM));
		}
	      else
		{
		  ret = set_imon_high_v6521n((uint32_t)stoi(CHNUM));
		}
	      if (ret != cvSuccess)
		{
		  printf("\nBad imon range or bad channel\n");
		  success = false;
		}
	    }
	  else if (BOARD == "P")
	    {
	      ss >> CHNUM >> VSET >> ISET >> PW >> TRIP_TIME 
		 >> SVMAX >> RAMP_DOWN >> RAMP_UP >> PWDOWN >> IMON_RANGE;
	    
	      ret = set_voltage_v6521p((uint32_t)stoi(CHNUM),(uint32_t)stoi(VSET));
              if (ret != cvSuccess)
                {
                  printf("\nBad voltage or bad channel\n");
                  success = false;
                }

	      ret = set_current_v6521p((uint32_t)stoi(CHNUM),stof(ISET));
              if (ret != cvSuccess)
                {
                  printf("\nBad current or bad channel\n");
                  success = false;
                }

	      if (stoi(PW)) enable_channel.push_back((uint32_t)stoi(CHNUM)+20);

              ret = set_trip_time_v6521p((uint32_t)stoi(CHNUM),(uint32_t)stoi(TRIP_TIME));
              if (ret != cvSuccess)
                {
                  printf("\nBad trip time or bad channel\n");
                  success = false;
		}

              ret = set_svmax_v6521p((uint32_t)stoi(CHNUM),(uint32_t)stoi(SVMAX));
              if (ret != cvSuccess)
                {
                  printf("\nBad svmax or bad channel\n");
                  success = false;
                }

	      ret = set_ramp_down_v6521p((uint32_t)stoi(CHNUM),(uint32_t)stoi(RAMP_DOWN));
              if (ret != cvSuccess)
                {
                  printf("\nBad ramp down or bad channel\n");
                  success = false;
		}

	      ret = set_ramp_up_v6521p((uint32_t)stoi(CHNUM),(uint32_t)stoi(RAMP_UP));
              if (ret != cvSuccess)
		{
                  printf("\nBad ramp up or bad channel\n");
		  success = false;
                }

              if (stoi(PWDOWN))
                {
                  ret = ramp_down_channel_v6521p((uint32_t)stoi(CHNUM));
                }
              else
                {
                  ret = kill_channel_v6521p((uint32_t)stoi(CHNUM));
                }
              if (ret != cvSuccess)
                {
                  printf("\nBad power down or bad channel\n");
                  success = false;
                }

	      if (stoi(IMON_RANGE))
                {
                  ret = set_imon_low_v6521p((uint32_t)stoi(CHNUM));
		}
              else
                {
                  ret = set_imon_high_v6521p((uint32_t)stoi(CHNUM));
		}
	      if (ret != cvSuccess)
		{
                  printf("\nBad imon range or bad channel\n");
                  success = false;
		}

	    }
	  else
	    {
	      continue;
	    }

	}
    }

  CAENVME_End(handle);
  if (!success) return 1;
  return 0;
}

int powerdown()
{
  CVBoardTypes vme_board = cvV1718;
  CVErrorCodes ret;

  ret = CAENVME_Init(vme_board, 0, 0, &handle);
  if (ret != cvSuccess)
    {
      printf("\n\n Error opening V1718! \n\n");
      CAENVME_End(handle);
      return 1;
    }

  bool success = true;
  for (int ch = 0; ch < 6; ch++)
    {
      ret = disable_channel_v6521n(ch);
      if (ret != cvSuccess)
	{
	  printf("Error %d when ramping down V6521N!!\n",ret);
	  success = false;
	}
    }
  for (int ch = 0; ch < 6; ch++)
    {
      ret = disable_channel_v6521p(ch);
      if (ret != cvSuccess)
	{
	  printf("Error %d when ramping down V6521P!!\n",ret);
	  success = false;
	}
    }
  CAENVME_End(handle);
  if (!success) return 1;
  return 0;
}

int powerup()
{
  CVBoardTypes vme_board = cvV1718;
  CVErrorCodes ret;

  ret = CAENVME_Init(vme_board, 0, 0, &handle);
  if (ret != cvSuccess)
    {
      printf("\n\n Error opening V1718! \n\n");
      CAENVME_End(handle);
      return 1;
    }

  std::string BOARD,CHNUM,VSET,ISET,
    PW,TRIP_TIME,SVMAX,RAMP_DOWN,
    RAMP_UP,PWDOWN,IMON_RANGE;

  std::string line;
  std::ifstream configfile ("config.conf");

  bool success = true;

  if (configfile.is_open())
    {
      while (getline(configfile,line))
	{
	  std::stringstream ss(line);
          ss >> BOARD;
          if (BOARD == "N")
            {
              ss >> CHNUM >> VSET >> ISET >> PW >> TRIP_TIME
                 >> SVMAX >> RAMP_DOWN >> RAMP_UP >> PWDOWN >> IMON_RANGE;

	      if (stoi(PW)) 
		{
		  ret = enable_channel_v6521n((uint32_t)stoi(CHNUM));
		  if (ret != cvSuccess)
		    {
		      printf("Error enabling V6521N channel %i\n",stoi(CHNUM));
		      success = false;
		    }
		}
	    }
	  else if (BOARD == "P")
	    {
	      ss >> CHNUM >> VSET >> ISET >> PW >> TRIP_TIME
                 >> SVMAX >> RAMP_DOWN >> RAMP_UP >> PWDOWN >> IMON_RANGE;

              if (stoi(PW))
		{
                  ret = enable_channel_v6521p((uint32_t)stoi(CHNUM));
                  if (ret != cvSuccess)
                    {
                      printf("Error enabling V6521P channel %i\n",stoi(CHNUM));
                      success = false;
                    }
		}

	    }
	  else
	    {
	      continue;
	    }
	}
    }

  CAENVME_End(handle);
  if (!success) return 1;
  return 0;
}

int main(int argc, char *argv[]) 
{
  for (int i = 1; i < argc; i++)
    {
      printf("%s\n",argv[i]);
      if (!strcmp(argv[i], "--setconfig"))
	{
	  if (i+1 == argc)
	    {
	      printf("Feed me a config file!\n");
	      return 1;
	    }
	  return setconfig();
	}
      if (!strcmp(argv[i], "--powerdown"))
	{
	  return powerdown();
	}
      if (!strcmp(argv[i], "--powerup"))
	{
	  return powerup();
	}
      if (!strcmp(argv[i], "--getconfig"))
	{
	  return getconfig();
	}
      if (!strcmp(argv[i], "--monitor"))
	{
	  return monitor();
	}
      
    }
  
  printf("Usage: sethv [command] [optional parameters]\n");
  printf("  Commands:\n");
  printf("    --setconfig   Requires parameter pointing to the location of the\n");
  printf("                  configuration file.\n");
  printf("    --powerdown   Ramp down voltages and turn channels off.\n");
  printf("    --powerup     Turn channels on and ramp up voltages.\n");
  printf("    --getconfig   Read the pre-set parameters from VME.\n");
  printf("    --monitor     Read the instantaneous parameters from VME\n");
  printf("                  (e.g. voltage, current, etc.).\n");
  return 1;
}

